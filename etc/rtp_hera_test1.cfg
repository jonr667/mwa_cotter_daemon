[dbinfo]
dbuser = 
dbpasswd = 
dbhost = 
dbport = 3306
dbtype = mysql
dbname = hera_rtp

[Still]
hosts = AUTO
port = 14204
data_dir = /data/
path_to_do_scripts = /home/obs/src/RTP/scripts/hera
actions_per_still = 6
timeout = 14400
sleep_time = 5
block_size = 10
cluster_scheduler = 0

[WorkFlow]
### 
# prioritize_obs : 0 or 1, disabled by default
# if enabled ( prioritize_obs = 1 ) we will make use the priority scheduling function: Scheduler.determine_priority
# this is mainly used with the neighbors = 1 option and attempts to prioritize neighbors first 
###
prioritize_obs = 1
### 
# neighbors : 0 or 1, by default this is disabled, set = 1 to enable 
# If enabled we need to ensure we check to see if any other obsid's need to be processed
# before proceeding, if this is enabled the config option actions_end_file will be 
# used for cases where all the neighbors to a obsid have already been processed
###
neighbors = 0
###
# lock_all_neighbors_to_same_still : 0 or 1, if enabled then all neighbor obsid's will be routed to the same still server
###
lock_all_neighbors_to_same_still = 0
### 
# actions : comma seperated list of actions this workflow will perform in exact order.
# Do not use keywords NEW or COMPLETE, the system takes care of these internally, nothing is run on
# either the NEW or COMPLETE state, they are for internal tracking.  Once a workflow is completely
# finished it will be left in state COMPLETE.  To trigger the workflow set its Observation status to 
# the first action in the workflow, note that the first does not do anything except act as a placeholder
###
actions=UV_POT,UV,UVC,CLEAN_UV,PLOTAUTOS,ADD_LIBRARIAN_PLOTAUTOS,CLEAN_PLOTAUTOS,ANT_FLAG,ADD_LIBRARIAN_BADANTS,PULL_SUBARRAY,ADD_LIBRARIAN_SUBARRAY,FIRST_CAL_HEX,ADD_LIBRARIAN_FIRSTCAL,CLEAN_FIRST_CAL_HEX,CLEAN_SUBARRAY,CLEAN_ANT_FLAG,CLEAN_UVC,COMPLETE
#OMNICAL
#UVCR,CLEAN_UVC,ACQUIRE_NEIGHBORS,UVCRE,NPZ,UVCRR,NPZ_POT,CLEAN_UVCRE,UVCRRE,CLEAN_UVCRR,CLEAN_NPZ,CLEAN_NEIGHBORS,UVCRRE_POT,CLEAN_UVCRRE,CLEAN_UVCR,COMPLETE

### 
# actions_endfile :  only used when neighbors = 1
# This actions list will be used for an obsid after all of its neighbors have been processed
###
actions_endfile = UV_POT, UV, UVC, CLEAN_UV, COMPLETE
#UVCR, CLEAN_UVC, CLEAN_UVCR, COMPLETE
### 
# prereqs : Add Prerequisites that neighbors must meet before proceeding to perform the specified action.  
# Example below adds the prereqs UVCR and CLEAN_UVCR to the ACQUIRE_NEIGHBORS action.
# In order for a obsid to proceed onto ACQUIRE_NEIGHBORS all of its neighbors need to 
# be in either the UVCR or CLEAN_UVCR state
###
[UV]
args = [basename, '%s:%s/%s' % (pot,path,basename)]

[UVC]
args = [basename]

[CLEAN_UV]
args = [basename]

[PLOTAUTOS]
args = [basename+'c']

[ADD_LIBRARIAN_PLOTAUTOS]
args = ['local-rtp', '%s/%s'%(parent_dirs, basename+'c.autos.png')]

[CLEAN_PLOTAUTOS]
args = [basename+'c.autos.png']

[ANT_FLAG]
args = [basename+'c']

[ADD_LIBRARIAN_BADANTS]
args = ['local-rtp', '%s/%s.bad_ants'%(parent_dirs, basename+'c')]

[CLEAN_ANT_FLAG]
args = [basename+'c.badants']

[PULL_SUBARRAY]
args = [basename+'c']

[ADD_LIBRARIAN_SUBARRAY]
args = ['local-rtp',basename+'c',parent_dirs]

[CLEAN_UVC]
args = [basename+'c']
#
[FIRST_CAL_HEX]
args = [basename+'c']
#
[ADD_LIBRARIAN_FIRSTCAL]
args = ['local-rtp',basename+'c',parent_dirs]
#
[CLEAN_SUBARRAY]
args = [basename+'c']

[CLEAN_FIRST_CAL_HEX]
args = [basename+'c']

#[OMNICAL]
#args = [XXX]
#
#[ADD_LIBRARIAN]
#args = ['local-rtp',XXX]
#
#[CLEAN_PULL_SUBARRAY]
#args = [basename]
#
#[UVCR]
#args = [basename+'c']
#
#[CLEAN_OMNICAL]
#args = [XXX] #pull_subarray output + 'O'

#[ACQUIRE_NEIGHBORS]
#prereqs = UVCR, CLEAN_UVCR
# args, Execute in python with exec function, this will be what is passed as the arguments to this actions do_script
#args = ['%s:%s/%s' % (n[0], n[1], n[-1] + 'cR') for n in neighbors if n[0] != stillhost or n[1] != stillpath]

#[UVCRE]
#args = interleave(basename+'cR')

#[NPZ]
#args = [basename+'cRE']

#[UVCRR]
#args = [basename+'cR']

#[NPZ_POT]
#args = [basename+'cRE.npz', '%s:%s' % (pot, path)]
# args = [basename+'cRE.npz', 'node02:/scratch/jonri_test_output']

#[CLEAN_UVCRE]
#args = [basename+'cRE']

#[UVCRRE]
#args = interleave(basename+'cRR')

#[CLEAN_UVCRR]
#args = [basename+'cRR']

#[CLEAN_NPZ]
#args = [basename+'cRE.npz']

#[CLEAN_NEIGHBORS]
#args =  [n[-1] + 'cR' for n in neighbors if n[0] != stillhost]

#[UVCRRE_POT]
#args = [basename+'cRRE', '%s:%s' % (pot, path)]
# args = [basename+'cRRE', 'node02:/scratch/jonri_test_output']

#[CLEAN_UVCRRE]
#args = [basename+'cRRE']


#[CLEAN_UVCR]
#args = [basename+'cR']
#prereqs = UVCRRE
#
